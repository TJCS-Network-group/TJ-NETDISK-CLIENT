# Form implementation generated from reading ui file 'NetDisk.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import json

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QLineEdit, QMenu, QInputDialog, QFileDialog, QProgressBar, QListWidgetItem, QMessageBox
from PyQt6.QtGui import QPixmap, QAction, QCursor
from PyQt6.QtCore import QSize, QThread
from PyQt6 import uic

import config
from NetDisk import Ui_NetDiskWindow
from MyProgress import MyProgress
from client import client
from uploadThread import UploadFileThread
import requests
import os
import copy

FRAG_SIZE = 4 * 1024 * 1024


# 根据字典的值value获得该值对应的key
def get_dict_key(dic, value):
    key = list(dic.keys())[list(dic.values()).index(value)]
    return key


class NetDisk(QtWidgets.QMainWindow, Ui_NetDiskWindow):
    switch_window_login = QtCore.pyqtSignal()
    client = client()

    def __init__(self):
        super(NetDisk, self).__init__()

        self.path_list = []
        self.thread_list = {}
        self.upload_item_list = {}
        self.rightClickMenu = None
        self.setupUi(self)
        self.show()
        self.tableWidget.setColumnWidth(0, 70)
        self.tableWidget.setColumnWidth(1, 200)
        self.tableWidget.setColumnWidth(2, 135)
        self.tableWidget.setColumnWidth(3, 100)
        self.tableWidget.doubleClicked.connect(self.clickTable)
        self.tableWidget.customContextMenuRequested.connect(self.tableMenuOpen)
        self.file_list = []
        self.download_list = []
        self.upload_list = []
        self.selectRowIndex = None
        self.copyFrom = None
        self.moveFrom = None
        self.ActionRename = QAction(u'重命名')
        self.ActionCopy = QAction(u'复制')
        self.ActionDelete = QAction(u'删除')
        self.ActionMove = QAction(u'移动')
        self.ActionDownload = QAction(u'下载')
        self.ActionPaste = QAction(u'粘贴')
        self.ActionMoveTo = QAction(u'移动到此处')

        self.ActionRename.triggered.connect(self.renameFunc)
        self.ActionCopy.triggered.connect(self.copyFunc)
        self.ActionDelete.triggered.connect(self.deleteFunc)
        self.ActionMove.triggered.connect(self.moveFunc)
        self.ActionDownload.triggered.connect(self.downloadFunc)
        self.ActionPaste.triggered.connect(self.pasteFunc)
        self.ActionMoveTo.triggered.connect(self.movetoFunc)

        self.pushButton_9.clicked.connect(self.newDirFunc)
        self.pushButton_10.clicked.connect(self.uploadDirFunc)
        self.pushButton_11.clicked.connect(self.uploadFileFunc)
        self.pushButton_12.clicked.connect(self.refreshFunc)
        self.pushButton_13.clicked.connect(self.backFunc)

        self.action.triggered.connect(self.logoutFunc)
        self.action_2.triggered.connect(self.setWorkDir)

        self.listWidget.doubleClicked.connect(self.uploadDoubleClick)

        # resp = requests.post("http://121.37.159.103:7777")
        # print(resp.header["Set-Cookie"])
        self.current_user = config.get_current_user()
        self.user_config = config.get_user_config(self.current_user)
        if self.user_config.get('tmp_path') is None:
            self.setWorkDir()
        self.client.headers['Cookie'] = self.user_config['Cookie']
        ans = self.client.get_root_id()
        print("get root id", ans)
        self.root_id = ans['data']['root_id']
        self.getRootId(self.root_id)
        ans = self.client.get_dir(self.root_id)
        print("get dir", ans)
        # if
        self.file_list = ans['data']

        # self.file_list = [
        #     {'type': 1, 'name': 'testdir', 'id': 0, 'last_modify_time': "2022-6-28"},
        #     {'type': 0, 'name': 'test.pdf', 'id': 0, 'fsize': 100000, 'last_modify_time': "2022-6-28"},
        # ]
        self.refreshTable()

        # item = QListWidgetItem()
        # item.setSizeHint(QSize(200, 50))
        # widget = MyProgress()
        # self.listWidget.addItem(item)
        # self.listWidget.setItemWidget(item, widget)
        # widget.setFileNameText("test.pdf")
        # widget.setFSize(1000000)
        # widget.setProgressValue(0)
        # widget.start()

        #
        # item = QListWidgetItem()
        # item.setSizeHint(QSize(200, 50))
        # widget = MyProgress()
        # self.listWidget.addItem(item)
        # self.listWidget.setItemWidget(item, widget)
        # widget.setFileNameText("test11111111111.pdf")
        # widget.setRestTimeText("05:12")
        # widget.progress.setMaximum(1000)
        # widget.progress.setValue(100)

        # self.ui = uic.loadUi("NetDisk.ui")

        # self.ui.pushButton.clicked.connect(self.loginClicked)
        # self.ui.pushButton_2.clicked.connect(self.registerClicked)
        # self.ui.lineEdit_2.setEchoMode(QLineEdit.EchoMode.Password)
        # self.ui.lineEdit_3.setEchoMode(QLineEdit.EchoMode.Password)
        # pixmap = QPixmap("logo_v.png")  # 按指定路径找到图片
        # self.ui.label.setPixmap(pixmap)  # 在label上显示图片
        # self.ui.label.setScaledContents(True)  # 让图片自适应label大小

    def getRootId(self, rootid):
        self.path_list = [{'name': 'root', 'id': rootid}]
        self.refreshPath()

    def refreshPath(self):
        pathStr = ''
        for path in self.path_list:
            pathStr += (path['name'] + '/')

        ans = self.client.get_dir(self.getPid())
        print("get dir", ans)
        # if
        self.file_list = ans['data']
        self.refreshTable()
        self.lineEdit_3.setText(pathStr)

    def clickTable(self, index):
        clickRowIndex = index.row()
        if self.file_list[clickRowIndex]['type'] == 1:
            print("enter dir", self.file_list[clickRowIndex])
            self.path_list.append(
                {'name': self.file_list[clickRowIndex]['name'], 'id': self.file_list[clickRowIndex]['id']})
            self.refreshPath()

    def tableMenuOpen(self, pos):
        print("menu", pos)
        index = self.tableWidget.indexAt(pos)
        if index.isValid():
            self.selectRowIndex = self.tableWidget.indexAt(pos).row()

            self.rightClickMenu = QMenu(self)
            self.rightClickMenu.addAction(self.ActionRename)
            self.rightClickMenu.addAction(self.ActionDelete)
            self.rightClickMenu.addAction(self.ActionDownload)
            self.rightClickMenu.addAction(self.ActionCopy)
            if self.copyFrom is not None:
                self.rightClickMenu.addAction(self.ActionPaste)
            self.rightClickMenu.addAction(self.ActionMove)
            if self.moveFrom is not None:
                self.rightClickMenu.addAction(self.ActionMoveTo)
            self.rightClickMenu.popup(QCursor.pos())
        elif self.copyFrom is not None:
            self.rightClickMenu = QMenu(self)
            self.rightClickMenu.addAction(self.ActionPaste)
            self.rightClickMenu.popup(QCursor.pos())
            self.rightClickMenu.popup(QCursor.pos())
        elif self.moveFrom is not None:
            self.rightClickMenu = QMenu(self)
            self.rightClickMenu.addAction(self.ActionMoveTo)
            self.rightClickMenu.popup(QCursor.pos())

    def refreshTable(self):
        print("refresh", len(self.file_list))
        self.tableWidget.setRowCount(len(self.file_list))
        print("set row count", self.file_list)

        for index, row in enumerate(self.file_list):
            # print(index, row)
            if self.tableWidget.item(index, 0) is None:
                self.tableWidget.setItem(index, 0, QtWidgets.QTableWidgetItem())
                self.tableWidget.setItem(index, 1, QtWidgets.QTableWidgetItem())
                self.tableWidget.setItem(index, 2, QtWidgets.QTableWidgetItem())
                self.tableWidget.setItem(index, 3, QtWidgets.QTableWidgetItem())
            item = self.tableWidget.item(index, 0)
            if row['type'] == 0:
                item.setText("文件")
            else:
                item.setText("文件夹")

            item = self.tableWidget.item(index, 1)
            item.setText(row['name'])

            item = self.tableWidget.item(index, 2)
            item.setText(row['last_change_time'])

            item = self.tableWidget.item(index, 3)
            if row['type'] == 0:
                item.setText(str(row['fsize']))
            else:
                item.setText("-")

    def renameFunc(self):
        print("rename")
        renameRow = self.file_list[self.selectRowIndex]
        (newName, hasGet) = QInputDialog.getText(self, '重命名', '重命名为：', text=renameRow['name'])
        if hasGet:
            print(f'重命名{renameRow["name"]}为{newName}')
            if renameRow['type'] == 0:
                ans = self.client.rename_file(renameRow['id'], newName)
            else:
                ans = self.client.rename_dir(renameRow['id'], newName)
            print(ans)
            if ans['statusCode'] == 200:
                if self.moveFrom['id'] is not None and self.moveFrom['id'] == renameRow['id']:
                    self.moveFrom['name'] = newName
                elif self.copyFrom['id'] is not None and self.copyFrom['id'] == renameRow['id']:
                    self.copyFrom['name'] = newName
                QMessageBox.about(self, ' ', f'重命名{renameRow["name"]}为{newName}')
                self.refreshPath()
            else:
                QMessageBox.critical(self, ' ', ans['message'])

    def deleteFunc(self):

        deleteRow = self.file_list[self.selectRowIndex]
        print("delete", deleteRow)
        if deleteRow['type'] == 0:
            ans = self.client.remove_file(deleteRow['id'])
        else:
            ans = self.client.remove_dir(deleteRow['id'])
        print(ans)
        if ans['statusCode'] == 200:
            if self.moveFrom['id'] is not None and self.moveFrom['id'] == deleteRow['id']:
                self.moveFrom = None
            elif self.copyFrom['id'] is not None and self.copyFrom['id'] == deleteRow['id']:
                self.copyFrom = None
            QMessageBox.about(self, ' ', f'删除{deleteRow["name"]}成功')
            self.refreshPath()
        else:
            QMessageBox.critical(self, ' ', ans['message'])

    def copyFunc(self):
        self.moveFrom = None
        self.copyFrom = self.file_list[self.selectRowIndex]
        print("copy from", self.copyFrom)
        pass

    def pasteFunc(self):
        pasteTo = self.path_list[-1]
        print("paste to", pasteTo)
        if self.copyFrom is None:
            return
        if self.copyFrom['type'] == 0:
            ans = self.client.copy_file(self.copyFrom['id'], pasteTo['id'])
        else:
            ans = self.client.copy_dir(self.copyFrom['id'], pasteTo['id'])
        print(ans)
        if ans['statusCode'] == 200:
            QMessageBox.about(self, ' ', f'复制{self.copyFrom["name"]}成功')
            self.refreshPath()
        else:
            QMessageBox.critical(self, ' ', ans['message'])

    def moveFunc(self):
        self.copyFrom = None
        self.moveFrom = self.file_list[self.selectRowIndex]
        print("move from", self.moveFrom)
        pass

    def movetoFunc(self):
        moveTo = self.path_list[-1]
        print("move to", moveTo)
        if self.moveFrom is None:
            return
        if self.moveFrom['type'] == 0:
            ans = self.client.move_file(self.moveFrom['id'], moveTo['id'])
        else:
            ans = self.client.move_dir(self.moveFrom['id'], moveTo['id'])
        print(ans)
        if ans['statusCode'] == 200:
            QMessageBox.about(self, ' ', f'移动{self.moveFrom["name"]}成功')
            self.moveFrom = None
            self.refreshPath()
        else:
            QMessageBox.critical(self, ' ', ans['message'])
        pass

    # TODO 下载功能
    def downloadFunc(self):
        downloadRow = self.file_list[self.selectRowIndex]
        dirPath = QFileDialog.getExistingDirectory(self, "选择要文件的存放位置")
        if dirPath != '':
            print("download", dirPath, downloadRow)

    def newDirFunc(self):
        print("newDir")
        (newName, hasGet) = QInputDialog.getText(self, '新建文件夹', '文件夹名：')
        if hasGet:
            print(f'新建文件夹{newName}')
            ans = self.client.create_dir(self.getPid(), newName)
            print(ans)
            self.refreshPath()
        pass

    def getPid(self):
        return self.path_list[-1]['id']

    # TODO 上传文件夹
    def uploadDirFunc(self):
        dirpath = QFileDialog.getExistingDirectory(self, "选择要上传的文件夹")
        if dirpath != '':
            print("upload dir", dirpath)
            dirname = dirpath.split('/')[-1]
            upload_index = copy.deepcopy(self.user_config['upload_index'])
            pid = self.getPid()

            # ans = self.client.create_dir(self.getPid(),dirname)
            # print(ans)
            # dirMap = {dirpath: ans['data']['did']}
            # fileMap = {}
            # totalSize = 0
            # for root, dirs, files in os.walk(dirpath):
            #     print(root, dirs, files)
            #     for subdir in dirs:
            #         ans = self.client.create_dir(dirMap[root], subdir)
            #         print(ans)
            #         dirMap[os.path.join(root, subdir)] = ans['data']['did']
            #
            #     for file in files:
            #         fileMap[os.path.join(root, file)] = dirMap[root]
            #         totalSize += os.path.getsize(os.path.join(root, file))

    # TODO 上传文件
    def uploadFileFunc(self):
        (filepath, _) = QFileDialog.getOpenFileName(self, "选择要上传的文件")
        print("12345")
        if filepath != '':
            print("upload file", filepath)
            filename = filepath.split('/')[-1]
            upload_index = copy.deepcopy(self.user_config['upload_index'])
            print("upload index", upload_index)
            pid = self.getPid()
            fsize = os.path.getsize(filepath)
            self.user_config['upload_list'][upload_index] = {"type": "file", "filename": filename, "filepath": filepath,
                                                             "pid": pid, "fsize": fsize, "index": 0, "isPause": False}
            print(self.user_config['upload_list'])

            self.user_config['upload_index'] += 1

            print("upload index", upload_index)

            config.set_user_config(self.current_user, self.user_config)

            newThread = UploadFileThread()
            newThread.setOption(upload_index, filepath, pid)
            newThread.trigger.connect(self.uploadUpdate)
            # newThread.console.connect(self.consolePrint)
            newThread.start()
            self.thread_list[upload_index] = newThread
            item = QListWidgetItem()
            item.setSizeHint(QSize(200, 50))
            widget = MyProgress()
            self.listWidget.addItem(item)
            self.listWidget.setItemWidget(item, widget)
            widget.setFileNameText(filename)
            widget.setFSize(fsize)
            widget.setProgressValue(0)

            widget.start()
            # self.listWidget.itemWidget(item)

            self.upload_item_list[upload_index] = item
            print(1)

    def uploadUpdate(self, upload_index: int, message):
        print("upload update", upload_index, message)
        if upload_index == -1:
            return

        if message == 'success':
            item = self.upload_item_list[upload_index]
            widget = self.listWidget.itemWidget(item)
            widget.finish()
            self.user_config['upload_list'].pop(upload_index)
            config.set_user_config(self.current_user, self.user_config)

            self.refreshPath()
        elif message == 'fail':

            pass

        elif message == 'start':

            pass


        else:

            item = self.upload_item_list[upload_index]
            widget = self.listWidget.itemWidget(item)
            value = (int(message) + 1) * FRAG_SIZE
            widget.setProgressValue(value)

    def uploadDoubleClick(self, index):
        print(index.row())
        # self.listWidget.indexWidget(index)
        item = self.listWidget.item(index.row())
        upload_index = get_dict_key(self.upload_item_list, item)
        print(upload_index)
        widget = self.listWidget.itemWidget(item)
        print(self.user_config['upload_list'])
        if self.user_config['upload_list'].get(upload_index) is None:
            return
        if self.user_config['upload_list'][upload_index]['isPause']:
            self.user_config['upload_list'][upload_index]['isPause'] = False
            widget.restart()
        else:
            self.user_config['upload_list'][upload_index]['isPause'] = True
            widget.pause()
        self.thread_list[upload_index].trigger.emit(-1, "doubleClick")

        # upload_index = widget.

    def pauseUpload(self, upload_index):
        pass

    def refreshFunc(self):
        print("refresh")
        self.refreshPath()

    def backFunc(self):
        print("back")
        if len(self.path_list) > 1:
            self.path_list.pop()
        self.refreshPath()

    def logoutFunc(self):
        print("logout")
        ans = self.client.logout()
        print(ans)
        self.close()
        self.switch_window_login.emit()

    def setWorkDir(self):
        dirPath = QFileDialog.getExistingDirectory(self, "选择存放临时文件文件夹", self.user_config.get('tmp_path'))
        self.user_config['tmp_path'] = dirPath
        config.set_user_config(self.current_user, self.user_config)
